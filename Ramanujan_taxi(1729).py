# Ramanujan's taxi
# 拉马努金的出租车问题：
# 1729是可以表示两种两个不同数立方和的最小整数
# a**3 + b**3 = c**3 + d**3(四个不同的整数满足此等式)，满足此等式的数字也叫做：士数

# 此程序暴露了一个问题，在多重循环时，如果循环的可迭代对象比较大时，运行量会大大增加，导致运行速度及其缓慢
# 因此在使用多重循环的时候，要着重考虑这个问题，以免出现这个问题（刚开始的时候，我的参数设置的是1800，导致运行速度慢到可怕）

n = int(input('请输入一个整数：\n'))
m = 0
for a in range(1,n+1):
    for b in range(1,n+1):
        for c in range(1,n+1):
            for d in range(1,n+1):
                if (a**3 + b**3) == (c**3 + d**3):
                    if a + b != c + d:
                        print('{}**3 + {}**3 = {}**3 + {}**3 = {}'.format(a,b,c,d,a**3+b**3))
                        m = m + 1
                
if m == 0:
    print("在给定范围内未发现符合条件的数字")
    
# 下面是书上的解决方案（for循环版本）：体现了良好的可读性，提高了运行效率
# 关键是循环的范围，以及在明显不符合条件时，及时终止循环

mm = int(input('请输入一个整数：\n'))
mmm = 0        # 计数

# 检测i1,i2,i3,i4四个数,满足 i1^3 + i2^3 = i3^3 + i4^3，如果不满足，随时终止循环
# i1 从 1 开始，直到 m + 1
for i1 in range(1,m + 1):
    if i1**3 > m:               # 去除冗余的循环
        break

    # i2 从 i1 开始循环，避免重复循环
    for i1 in range(i1,m + 1):
        if i1**3 + i2**3 > m:
            break
            
        # i3 从 i1 + 1 开始循环，避免重复循环
        for i3 in range(i1 + 1,m + 1):
            if i3**3 > i1**3 + i2**3 :
                break
                
            # i4 从 i3 开始循环，避免重复循环
            for i4 in range(i3,m + 1):
                if i3**3 + i4**3 > i1**3 + i2**3:
                    break
                    
                if i3**3 + i4**3 == i1**3 + i2**3:
                    print('{}^3 + {}^3 = {}^3 + {}^3 = {}'.format(i1,i2,i3,i4,i1**3 + i2**3)) 
                    mmm += 1
if mmm == 0:
    print("在给定范围内未发现符合条件的数字")