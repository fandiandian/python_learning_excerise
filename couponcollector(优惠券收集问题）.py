# 优惠券收集问题
# coupon collector
# 假设一个贸易公司发行 n 张不同的交易卡，每张交易卡的购买概率相同，问需要购买多少张加以开，才能收集齐所有的交易卡
# 类似地：从一副扑克牌中，需要随机抽取（有放回的抽取）多少次才能集齐四种花色，多少次才能集齐所有的牌

'''
本程序，通过构建数组，来构建一副扑克牌，然后随机抽取一张，另外构建一个列表，用于存储抽取的扑克牌，存储的条件时：not in；（不包含大小王）
'''
# 导入随机模块
import random

# 预设的列表，用以完成一副扑克的构建
poker = []
    # spade：黑桃；heart：红心；club：梅花；diamond：方块
pokers1 = ['spade','heart','club','diamond'] 
pokers2 = ['A','J','Q','K']

# 构建一副扑克牌（不带花色12张）
for i1 in range(2,11):
    pokers2.append(str(i1))
# 构建一副扑克牌（混合花色）
for i2 in pokers1:
    for i3 in pokers2:
        poker.append(i2 + ' of ' + i3)

# 打印所构建的扑克牌
print(poker)

# 构建运行次数存储列表，及执行次数
times = []        
n = 20000
     
# 开始执行抽取循环，循环次数为：n     
for i4 in range(n):        
    
    # 计步以及存放抽取出的不重复的牌（循环开始初始化）
    m = 0
    collector = []
    
    # 抽取不重复的牌保存到列表中，循环控制条件为：列表的长度
    while len(collector) < 52:
        card = random.choice(poker)
        if card not in collector:
            collector.append(card)
        m += 1
        
    # 抽取次数保存到列表    
    times.append(m)

# 打印保存次数的列表   
for ii in times:
    print(ii)

# 打印平均次数
print(sum(times)/n)
 
################# 调皮的分割线 #########################
 
# 程序的运行结果如下：
# 执行10000次（共执行四次），分别为：236.0945 , 235.7506 , 234.4889 , 236.1632
# 执行100000次（共执行一次），结果为：235.90748
# 综合结果来看：一副扑克牌，有放回的抽取，每张牌都抽取一遍的平均结果：大约是要抽取236次，才能完成的的获得一副扑克牌
# 平均来看：需要抽取4.519次才能获得一张不重复的 
# 抽取的次数，保存到列表中，进行分析，结果应该是服从正态分布

# 在excel中，对得到列表值进行分析，得出的结果是，满足正态分布

# 后续在网上看了一下问题：从概率学上进行计算期望，得到的计算公式为
# 52*（1 + 1/2 + 1/3 + ... + 1/52)      （这方面得好好补习一下了）
# 约等于 52 * 4.538043950697447 = 235.978285436267244 （10万次平均结果为：235.90748）
# 计算的结果与程序运行的结果可以说吻合的